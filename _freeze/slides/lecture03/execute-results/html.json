{
  "hash": "94990619475ac1e006f3e39126d2ce52",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"class 3: R basics\"\nauthor: \"Prashant K\"\ndate: 18/Jan/24\nformat: \n  revealjs:\n    mouse-wheel: true # scroll through slides\n    slide-number: true # show slide number\n    hide-inactive-cursor: true # hide mouse pointer unless moved?\n    reference-location: document # put references at the end\nexecute: \n  echo: false\neditor: visual\n---\n\n\n# Recap\n\n-   class 2: Made our own histograms by binning data, understand mean, median and comparing 2 distributions\n\n-   class 1: installed R, Rstudio and `tidyverse` package\n\n    -   If you already had these installed, check that they are the latest versions or re-install\n\n        -   R : `version` = 4.3.2 ; Rstudio (2022 or 2023 versions) ; tidyverse (just update it if you haven't installed last week with `install.packages('tidyverse')`\n\n# Today's class {.smaller}\n\n-   Refresh: directory structure, `.Rproj`ect, `R` script\n\n-   Introduce R datatypes: {*tip: check datatype with* `class()}`\n\n    -   Simple: `numeric`, `character`. Other simple: `factor`, `logical`\n\n    -   Compound: *combination of simple datatypes*: vector = `c(x, y)`, `list(x, y)`, `data.frame()` ; \\[*won't cover:* `matrix()`, `array()`\\]\n\n    -   Good practices: Commenting code for documentation. `# this code does x (if I get it to work)`\n\n-   Subset compound datatypes\n\n-   Control statements: *decision making*: `if()` and *repeat steps in a loop*: `for()`\n\nKey reference : [base R cheatsheet](https://geomoer.github.io/moer-base-r/assets/data/cheatsheets/base-r.pdf).PDF\n\n## Complex plotting assignment {.smaller visibility=\"'hidden'\"}\n\nIf you are well versed with R basics and are looking for some challenge, this slide is for you\n\n-   Download the [code](https://github.com/BIOS-538/BIOS-538.github.io/blob/main/_scripts_adhoc/hands_on_activity_notes/numberset.Rmd) we used to generate the data for the class2 activity\n\n-   plot the individual data points from this code\n\n-   Highlight the 30 points that your team got within this plot\n\n    -   With a different colour / outline / shape / anything fancy\n\n-   This will take you \\~2 lectures to finish so keep working on it\n\n*If you got any questions, you can ask me when I come around ; or the TAs if they are free from helping others learn R basics*\n\n## Refresh / Rstudio overview\n\n![](img/Rstudio_overview.png)\n\n## Refresh/setting up\n\n-   `.Rproj`ect file: works from the current directory, saves history of R commands, and all scripts that were open last time.\n\n-   `.R` script: A place where you save lines of R code and can run them all from top to bottom with one click or a command : `source('..R')`\n\n## Refresh / setting up {.incremental}\n\n-   directory structure:\n\n::: columns\n::: {.column width=\"50%\"}\nDirectory structure\n\n![](img/dir_structure.png)\n:::\n\n::: {.column width=\"50%\"}\nbash/terminal commands\n\n-   `mkdir`: make directory\n\n-   `cd`: change directory\n\n-   `ls`: list files and directories\n\n-   `touch x.txt`: make a empty files with any extension, ex: `x.txt`\n:::\n:::\n\n## Overview of all programming\n\n1.  Take simple datatypes: `1` ; `\"apple\"`, `TRUE`\n\n2.  Combine into complex data types: `c(1, 3, 5, 7)` / `c('apples', 'oranges')` ; `list( numbers, fruits..)`\n\n3.  Make decisions: `if(x > 3) \"apples are too sweet\"`\n\n4.  Repeat actions with only slight changes: `for(i in 1:5) do something with each i`\n\n5.  Make concise code by reusing parts as functions: `do_magic <- function(x) {\"x + magic here\"}`\n\n# Practice alongside me\n\nUse the script: `class3_R-basics.R` from **Canvas/files/** to follow along\n\n## Simple datatypes\n\n::: panel-tabset\n## Datatypes\n\n![](img/simple_datatypes.png)\n\nMissing elements marked as NA or NaN\n\n## Variable assignment\n\n![](img/variable_assignment.png)\n\n## R commands\n\nMaking these datatypes in R ; assigning to a variable\n\n-   numeric: `x <- 35`\n\n-   character: `y <- 'apples'`\n\n-   logical: `a <- TRUE` ; `b <- F` ; `c <- T`\n\n-   factor:\n:::\n\n## Compound datatypes\n\n*combination of simple datatypes*: vector = `c(x, y)`, `list(x, y)`, `data.frame(x1 = x, x2 = y)`\n\n::: panel-tabset\n### vector\n\n![](img/creating_vectors.png)\n\n### list\n\n![](img/lists_intro.png)\n\nWhen printed, the list looks like this\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n$x\n[1] 1 2 3 4 5\n\n$y\n[1] \"a\" \"b\"\n```\n\n\n:::\n:::\n\n\n### factor\n\nA vector where entries are ordered and stored as \"levels\"\n\nUse cases\n\n-   Order of colours assigned when plotting stuff\n\n-   Analyzing categorical questionnaires\n\n### Named elements\n\n-   Named vector: `c('a' = 1, 'b' = 2)`\n\n-   List: `list(x = 1:5, y = c('a', 'b'))`\n:::\n\n## Recap: Lecture 3  {.smaller}\n\n-   Refresh: directory structure, `.Rproj`ect, `R` script, directory structure\n\n-   Introduce R datatypes: {*tip: check datatype with* `class()}`\n\n    -   Simple: `numeric`, `character`. Other simple: `factor`, `logical`\n\n    -   Compound: *combination of simple datatypes*: vector = `c(x, y)`, `list(x, y)`, `data.frame()`\n\n    -   Good practices: Commenting code for documentation. `# this code does x (if I get it to work)`\n\n::: {.fragment fontcolour=\"gray\"}\n-   Subset/indexing compound datatypes: `x[3]`, `x[x>0]`, `dataframe[1,5]`\n\n-   Control statements: *decision making*: `if()` and *repeat steps in a loop*: `for()` or vectorize using functions\n:::\n\n# R basics continued\n\n*first 20 minutes of lecture 4* ; Date: 23/1/24\n\nLet us quickly finish talking about\n\n-   Vector subsetting / indexing\n\n-   Programing : `if..else` ; `for` and `function()`\n\n**Note**: Download the `class3_R-basics.R` file again from the website (*I updated it.. You can rename last weeks file with the \\_old suffix `â€¦ _old.R`*)\n\n## Subset compound datatypes\n\n-   vectors: single element: `x[3]`, multiple elements: `x[x>0]`, by name `x['a']`?\n\n-   Lists and dataframes:\n\n    -   whole row/column `list$x1` or `dataframe$x1` or `dataframe[ , 2]`\n\n    -   Single entry: `dataframe[1,5]`\n\n## Programming = control which statements are executed\n\n-   Control statements: *decision making*: `if()` and *repeat steps in a loop*: `for()`\n\n`if..else` :\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif (condition){\n  \"Do something\"\n} else {\n  \"Do something different\"\n}\n```\n:::\n\n\n`for()` loops\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfor (variable in sequence){\n  \"Do something with the variable\"\n}\n```\n:::\n",
    "supporting": [
      "lecture03_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}