{
  "hash": "96c8c6783ffdf636ab9a2b0e31265e6c",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"lecture08\"\nformat: revealjs\nmetadata-files: \n  - '_slides.yml'\nexecute: \n  echo: true # doesn't work?  \n---\n\n\n# Recap?\n\n# Today's class\n\n-   What is `ggplot()` and why is it awesome?\n\n-   Think of a plot / graph as having multiple layers\n\n-   ..\n\n## Building a plot layer by layer\n\n![Overview of the `ggplot()` syntax](img/ggplot_syntax.png){width=\"360\"}\n\nSource: [blog/sharpsightlabs.com](https://www.sharpsightlabs.com/blog/ggplot2-tutorial/#syntax-of-ggplot2):\n\n## Geom layers\n\n![](img/geom_types.png){fig-alt=\"types of geoms\" width=\"394\"}\n\nSource: [blog/sharpsightlabs.com](https://www.sharpsightlabs.com/blog/ggplot2-tutorial/#syntax-of-ggplot2):\n\nThere's many more geoms in the [ggplot cheatsheet](https://raw.githubusercontent.com/rstudio/cheatsheets/main/data-visualization.pdf)!\n\nLet us quickly see an animation of empty plot, adding axes, adding data for the histogram\n\n## Empty plot: `ggplot()` call\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\ndata(\"mtcars\")\n\nggplot(data = mtcars)\n```\n\n::: {.cell-output-display}\n![](lecture08_files/figure-revealjs/demo1-1.png){width=960}\n:::\n:::\n\n\n## Adding axes: `mapping = aes()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = mtcars,\n       mapping = aes(x = cyl, y = mpg))\n```\n\n::: {.cell-output-display}\n![](lecture08_files/figure-revealjs/demo2-1.png){width=960}\n:::\n:::\n\n\n## Adding points: `geom_point()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = mtcars,\n       mapping = aes(x = cyl, y = mpg)) + \n  geom_point()\n```\n\n::: {.cell-output-display}\n![](lecture08_files/figure-revealjs/demo3-1.png){width=960}\n:::\n:::\n\n\n## Adding line: `geom_line()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = mtcars,\n       mapping = aes(x = cyl, y = mpg)) + \n  geom_point() + \n  geom_line()\n```\n\n::: {.cell-output-display}\n![](lecture08_files/figure-revealjs/demo4-1.png){width=960}\n:::\n:::\n\n\n# Onto the worksheet now\n\nPlease download the \\_class8_ggplot_worksheet.Rmd or the `.R` file with the same name from the syllabus website\n\n-   the `.Rmd` will make it easier to read the prompts and run code by clicking on the \"play\" button (*run current chunk*) for each chunk\n\n-   If you are not comfortable with this, you can use the `.R` file instead with the same content\n\n# Design principles for graphics\n",
    "supporting": [
      "lecture08_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}