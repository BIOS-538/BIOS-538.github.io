---
title: "lecture08"
format: revealjs
metadata-files: 
  - '_slides.yml'
execute: 
  echo: true # doesn't work?  
---

# Recap?

# Today's class

-   What is `ggplot()` and why is it awesome?

-   Think of a plot / graph as having multiple layers

-   ..

## Building a plot layer by layer

![Overview of the `ggplot()` syntax](img/ggplot_syntax.png){width="360"}

Source: [blog/sharpsightlabs.com](https://www.sharpsightlabs.com/blog/ggplot2-tutorial/#syntax-of-ggplot2):

## Geom layers

![](img/geom_types.png){fig-alt="types of geoms" width="394"}

Source: [blog/sharpsightlabs.com](https://www.sharpsightlabs.com/blog/ggplot2-tutorial/#syntax-of-ggplot2):

There's many more geoms in the [ggplot cheatsheet](https://raw.githubusercontent.com/rstudio/cheatsheets/main/data-visualization.pdf)!

Let us quickly see an animation of empty plot, adding axes, adding data for the histogram

## Empty plot: `ggplot()` call

```{r demo1, echo=TRUE}
library(tidyverse)
data("mtcars")

ggplot(data = mtcars)

```

## Adding axes: `mapping = aes()`

```{r demo2, echo=TRUE}
ggplot(data = mtcars,
       mapping = aes(x = cyl, y = mpg))
```

## Adding points: `geom_point()`

```{r demo3, echo=TRUE}
ggplot(data = mtcars,
       mapping = aes(x = cyl, y = mpg)) + 
  geom_point()
```

## Adding line: `geom_line()`

```{r demo4, echo=TRUE}
ggplot(data = mtcars,
       mapping = aes(x = cyl, y = mpg)) + 
  geom_point() + 
  geom_line()
```

## Assign the plot to a variable

This hides the plot and needs to be called with `print()`

```{r assign_plot}
#| echo: true
base_plt <- 
  ggplot(data = mtcars,
       mapping = aes(x = cyl, y = mpg)) + 
  geom_point() + 
  geom_line()

```

*Hey, where's my plot gone?* ðŸ¤”

## Call the plot object to display/ `print` it

```{r assign_and_show}
#| echo: true
base_plt
```

## Add some `colour = col_name` in `aes()`

```{r colour, echo=TRUE}
#| echo: true
colour_plt <- # assign and print plot at the same
  ggplot(data = mtcars %>% mutate(vs_factor = as_factor(vs)),
       mapping = aes(x = cyl, y = mpg, colour = vs_factor)) + 
  geom_point() + geom_line() 
```

## Make a constant `colour = 'red'` - Doesn't work

```{r colour_outside_aes}
#| echo: true
ggplot(data = mtcars %>% mutate(vs_factor = as_factor(vs)),
       mapping = aes(x = cyl, y = mpg, colour = 'dracula')) + 
  geom_point() + geom_line() 
```

## Did the `colour = 'red'` really work?

```{r mess_the_colour}
#| echo: true
ggplot(data = mtcars %>% mutate(vs_factor = as_factor(vs)),
       mapping = aes(x = cyl, y = mpg, colour = 'blue')) + 
  geom_point() + geom_line() 
```

## Make a constant `colour = 'red'` outside `aes()`

*Hint: There should be no legend!*

```{r constant_colour}
#| echo: true
ggplot(data = mtcars,
       mapping = aes(x = cyl, y = mpg)) +
  
  geom_point(colour = 'blue') + geom_line(colour = 'blue') 
```

# Styling your ggplot

How to train your `ggplot::`

## Making axis labels great again

```{r store_plt, echo=FALSE}
colour_plt <- # assign and print plot at the same by piping to print()
  {ggplot(data = mtcars %>% mutate(vs_factor = as_factor(vs)),
       mapping = aes(x = cyl, y = mpg, colour = vs_factor)) + 
  geom_point() + geom_line()} # %>% print() # uncomment this to print!

```

```{r labels}
#| echo: true
colour_plt + 
  labs(
    x = 'number of cylinders', y = 'miles per gallon',
    title = "What's the takeaway here?",
    subtitle = 'More cylinders => less miles per gallon'
  )
```

![](http://127.0.0.1:16675/chunk_output/s/3D71E58D/cb0uv5xt7p3ul/000005.png)

## Add text annotations on the plot

```{r annotate}
#| echo: true
colour_plt + 
  annotate(geom = 'text', 
           x = 6, y = 25, colour = 'darkgreen',
           label = 'this is interesting, eh!?')
```

## Make broad style changes based on `theme`

```{r theme}
#| echo: true
colour_plt + theme_minimal()
```

# Onto the worksheet now

Please download the \_class8_ggplot_worksheet.Rmd or the `.R` file with the same name from the syllabus website

-   the `.Rmd` will make it easier to read the prompts and run code by clicking on the "play" button (*run current chunk*) for each chunk

-   If you are not comfortable with this, you can use the `.R` file instead with the same content

# Design principles for graphics

coming later..?
