---
title: "lecture 20: Linear regression"
author: "Prashant K"
date: 28/Feb/24
format: revealjs
metadata-files: 
  - '_slides.yml'
editor: visual
---

# Today's class

-   Understanding (*linear)* relationships between 2 or more dimensions of data

    -   Correlation

    -   Linear regression

-   Linear regression is also useful for prediction of `y` (*dependent variable)* for new values of `x` (*independent variable*)

-   Using the `lm(y ~ x, data = ?)` function in R

-   Interpreting the results : Coefficients, goodness of fit, p-values

## Correlation vs linear regression

::: columns
::: {.column width="50%"}
![](img/correlation_coefficient.png)

Correlation coefficient ($\rho$) quantifies the linearity of y \~ x (*Pearson)\
Spearman's rank* correlation coefficient quantifies the monotonicity (*y increases when x increases*)
:::

::: {.column width="50%"}
Linear regression quantifies the slope of the linearity as well as the degree of fit ($R^2$)
:::
:::

## Many flavours of linear regression {.smaller}

-   Simple linear regression : $y = \alpha + \beta x + \eta(0, \sigma)$

-   Multiple linear regression: $y = \alpha + \beta_1 x_1 + \beta_2 x_2 + ..+ \eta(0, \sigma)$

    -   regressor is non-linear, ex: *polynomial regression:* $y = \alpha + \beta_1 x_1 + \beta_2 x_1^2 + ..+ \eta(0, \sigma)$

-   Multivariate .. : multiple y values that are correlated (*not statistically independent*)

::: aside
Source: [wikipedia](https://en.wikipedia.org/wiki/Linear_regression)
:::

## Fitting a straight line perfectly {.smaller}

Fitting a straight line between any 2 points should be easy

![](img/line_fitting.jpg)

But we have noise in y, that makes this task not as straightforward

## Fitting a straight line with noise {.smaller}

Need R to fit this [numerically](https://en.wikipedia.org/wiki/Numerical_methods_for_linear_least_squares), using this [algorithm](https://stats.libretexts.org/Bookshelves/Introductory_Statistics/OpenIntro_Statistics_(Diez_et_al)./07%3A_Introduction_to_Linear_Regression/7.03%3A_Fitting_a_Line_by_Least_Squares_Regression); [in R](http://madrury.github.io/jekyll/update/statistics/2016/07/20/lm-in-R.html).

`geom_smooth(method = 'lm')` does this in the background and plots the result!

```{r show-fit-lm}
library(tidyverse)
anscombe <- datasets::anscombe

ggplot(anscombe, aes(x1, y1)) + geom_point() + 
  geom_smooth(method = 'lm', size = 0.5)
```

## Doing linear regression in R

```{r anscombe-lm}
#| echo: true

m <- lm(y1 ~ x1, data = anscombe) %>% print
```

## Interpreting results of `lm()` {.smaller}

Coefficients, t-tests & goodness of fit metrics

*For each coefficient, the p-values are for t-tests with null hypotheses that coefficient = 0*

```{r lm-summ}

summary(m)
```

::: aside
Useful [reference](https://www.statology.org/interpret-regression-output-in-r/) : Interpreting regression output in R/ Statology.org
:::

## How far are the data from fitted line?

Residuals are used to see how far data is from the fitted line

QC : residuals should be normally distributed (*assumption of the linear regression equation!*)

Residual = observed - predicted value = $Y_i - Y^f_i$

![](img/lm-residual.jpg)

::: aside
Source: [statology.org](https://www.statology.org/standardized-residuals-in-r/)
:::

## Goodness of fit metrics

-   Aggregate distance of data from regression line measured by **S** = Std error of regression / Residual standard error = stdev(residuals)

    -   [Better metric](https://statisticsbyjim.com/regression/standard-error-regression-vs-r-squared/). Comparable across linear and non-linear regressions!

-   $R^2$ = % of y variance that the model explains

::: aside
Video illustrating S calculation from residuals / [Khanacademy](https://www.youtube.com/watch?v=zMFdb__sUpw).
:::

## Let's try these out in the worksheet

[worksheet](https://github.com/BIOS-538/class-worksheets/blob/main/scripts/class20-solution_linear_regression.qmd) : `class20-solution_linear_regression.qmd`

We will follow this [guide](https://modernstatisticswithr.com/regression.html#linearmodels) to try `lm()` on the mtcars data
